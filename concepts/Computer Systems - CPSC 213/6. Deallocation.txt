Deallocation:

Deallocation is important for efficient use of memory. 

In C, free is a method that frees the memory immediately
.
A dangling pointer is a pointer that points to an address that has been freed. This is dangerous because a variable could still be pointing to the freed memory. The solution is that after you freed an address, you should re initialize the variable. 

In Java, objects are deallocated implicitly. A garbage collector runs periodically to deallocate unreachable objects. Hence, there is no worry of a dangling pointer. 

In Java, "new" allocates memory for an object in a heap space
Dog d1 = new Dog("Joey")
Dog d2 = new Dog("Snoopy")

Next, if we write:
d2 = new("Draco")
System.out.println(d2)

This will print out "Draco" and not "Snoopy" because a garbage collector went and freed d2 from having a value of Snoopy.

Garbage Collection: automatically frees memory. 

Memory leak happens when the garbage collector fails to deallocate memory.