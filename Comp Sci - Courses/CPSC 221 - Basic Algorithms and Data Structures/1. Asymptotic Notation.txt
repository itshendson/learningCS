• How do we measure the space and time of an algorithm, given that different computers have different hardware?

• Asymptotic Notation
- Measures the efficiency of an algorithm with the increase in the input size
- What happens to speed/time of an algo as 'n' approaches infinity.

• Notations
Big O = Upper Bound: n = O(n^2)
Theta = Tight Bound: n < 3n < 5n: 3n is tightly bound between two bounds
	= Used for analyzing the average case complexity of an algo
Omega = Lower Bound: n^3=o(log(n))

• Types of Functions
- Logarithmic: log n
- Linear: an + b
- Quadratic: an^2 + bn + c
- Polynomial: an^z + ... an^2 + an^1 + an^0, where z is some constant
- Exponential a^n, where a is some constant

• Simplifying Notations
- You can ignore constants and any lower order terms bcuz they simply are too small to matter as the function approaches infinity. So we can simply the types of functions as follows:

- Logarithmic: log n
- Linear: n
- Quadratic: n^2
- Polynomial: n^z, where z is some constant
- Exponential a^n, where a is some constant

• Big-O
- Big-O represents the worst case scenario/the upper bound of a function
